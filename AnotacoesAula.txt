_______13/09/2018
Arvore AVL em disco: 

Aluno : ra, nome. 



------ 
Incluir larissa: 

	Ra	Nome
0	16184   Larissa 
1	16162   Bruna

IdXra
	Esq|RA   |Dir|Dados(Em qual linha está) 	
0	1  |16184|-1 |0
1	-1 |16162|-1 |1 

//Incluir na tabela de dados é sequencial, mas na hora que for fazer a inclusão na arvore estarão organizadas.

//A tabela alunos está em uma arquivo 
//A arvore está em outro arquivo, não na memória.

//Detalhes -> declarar uma struct com ra e nome, struct com esqrd,ra,dir dados.
//ou fazer a api para qualquer tipo de arquivo, como ter qualque informação sobre arquivo, tipo 
//qos byte ocupa cada tipo, qtos bytes de informacao ocupa a chave

//DICA importante: 
//Excluir -> nao exluir de fato, só marcar para exclusão e manter uma lista de disponíveis
	antes de comecar os alunos tem um registro(lista) especial que diz sobre os disponiveis 
	inicio de lista. Na hora que for incluir reaproveita um indice da lista de disponiveis. 
	Talvez no arquivo de indice colocar uma raiz e o inicio da lista de disponiveis
_______27/09/2018 
Matriz esparsa 

Arvore avl que guarda linhas, dentro de cada nó existe outra arvore avl. 

pra procurar, pega a linha e acha na arvore maior, quando achar o nó entra na arvore do no e procura
a coluna, Quando achar junto vai estar a coluna. 

Detalahes = pode acontecer de procurarmos uma linha ou coluna e ela não existir, então o retorno é 
o valor padrão (provavelmente falso). 

Quando não existe nenhuma conexão pode apagar (quando guarda falso). 
Insere quando o valor não existe e remove quando insere valor padrão 


Trabalho: 
	Fazer um classe matriz esparsa
		ArvoreAvl de linhas, // cada nó possui uma arvore avle de colunas  
		valor padrão //
		
		get(linha,coluna)
		put(linha,coluna,valor)
		construtor(valorPadrao)
	// valor e valor padrão serão ponteiro de uma classe info (para poder colocar 
	//qualquer coisa), nao precisa ser comparable. 

	//linha coluna serão unsigned long int 

	Teremos tb uma classe 
		
	


 

